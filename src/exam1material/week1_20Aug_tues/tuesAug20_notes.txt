CIS 301. Logical Foundations of Programming.

Julie Thornton.

What is this class?
- logical reasoning (basics, puzzles)
- writing formal statements (propositional and predicate logic)
- proofs (why?)
- reasoning about code
    - analyzing what we know
    - identifying equivalent programs
    - simplifying programs
    - formally describing what programs do
- basics of proving correctness of programs (why?)


Syllabus

Canvas setup - weekly class material

Ed Discussion


///////////////////////////////////////////////////////

HW 0 - due Thursday, August 22
    --> see how to do it

HW 1 - due Tuesday, August 27

////////////////////////////////////////////////////////

Taking a step back...what is logic?

- analysis of an argument according to a set of rules
- given a set of premises (and sometimes a conclusion)


- a VALID conclusion is one that is always true
    anytime all the premises are true


Note that the premises might make no sense!

////////////////////////////////////////////////////////

Premise 1: If a person wears a red shirt,
    then they don't like pizza.

Premise 2: Fred is wearing a red shirt.

Conclusion: Fred doesn't like pizza.



--> Is this a valid argument? yes...but
    (we are assuming that Fred is a person)



(is there a hidden assumption we're making about Fred?)




////////////////////////////////////////////////////////

Logical Arguments with "OR"
    - can be ambiguous! Why?

I order fries or I order chips.



"or" can be inclusive or exclusive


- in English, how do we interpret "or"? exclusive



- in programming? || is inclusive




"Or" in THIS class: will be inclusive UNLESS there
is additional wording (like A or B but not both)



Premise 1: I'll fold the laundry or I'll do the dishes.
Premise 2: I don't fold the laundry.

--> What can I conclude? I do the dishes




//////////////////////////////////////////////////////////

num = 5;
if (num < 4 || x >= 10) {
    statement;
}



Suppose we know "statement" is executed
--> What can we conclude? x >= 10






/////////////////////////////////////////////////////////

x = 9;
if (num < 4 || x >= 10) {
    if (num > 2) {
        statement;
    }
}



Suppose we know "statement" is executed
--> What can we conclude? num is 3 (assuming it is an integer)


////////////////////////////////////////////////////////

What rule are we seeing with an "or" statement,
where we know that one of the statements is NOT true?


the other side is



////////////////////////////////////////////////////////

Logical Arguments with "IF/THEN" (aka "implies" -> )

If it is raining, then I will get wet.
It is raining.

--> What can I conclude? I will get wet

p -> q





////////////////////////////////////////////////////////

When we have an "if/then" statement,
and we know that the "if" part is true?

    ...what can we always conclude?



the then part is true

/////////////////////////////////////////////////////////

If I don't hear my alarm, then I will be late for class.
I am late for class.

--> What can I conclude?

NOTHING (beyond that I am late for class)



p <-> q is a bi-implication

/////////////////////////////////////////////////////////

If I don't hear my alarm, then I will be late for class.
I hear my alarm.

--> What can I conclude? NOTHING (except that I hear my alarm)






/////////////////////////////////////////////////////////

If I don't hear my alarm, then I will be late for class.
I'm not late for class.

--> What can I conclude? I DID hear my alarm





if (condition) {
    statement
}

--> what if we know statement is NOT executed? condition is false




If p Then q

... is equivalent to: If not q Then not p


////////////////////////////////////////////////////////

More if/then logic in programming.



if (num < 4 || x >= 10) {

    y = 17;
}

--> suppose y is 17 here. What do we know?
    NOTHING - y might have been 17 before the if-statement

If p then q


/////////////////////////////////////////////////////////

y = 10;

if (num < 4 || x >= 10) {

    y = 17;
}

--> suppose y is 17 here. Can we conclude anything now?
    num < 4 || x >= 10

    (we must have gone in the if-statement because y changed
    from 10 to 17)


//////////////////////////////////////////////////////////

if (num < 4 || x >= 10) {

    y = 17;
}

--> suppose y is NOT 17 here. What do we know?

num < 4 || x >= 10 was false


num >= 4 and x < 10


///////////////////////////////////////////////////////

Logic puzzles.

The puzzles in this lecture are from or inspired by:
"What is the Name of This Book?", by Raymond Smullyan

///////////////////////////////////////////////////////

The island of Knights and Knaves.
Each inhabitant is either a knight or a knave.

Knights ALWAYS tell the truth, and knaves ALWAYS lie.

///////////////////////////////////////////////////////

Who can say, "I'm a knave"?

Can a knight? NO - would be a lie
Can a knave? NO - they are compelled to lie






//////////////////////////////////////////////////////////

You see two inhabitants, Ava and Bob.

Ava says that Bob is a knave.
Bob says, "Neither Ava nor I are knaves."

    "Ava is a knight and I am a knight"

What are Ava and Bob? (Ava is a knight, Bob is a knave)

    Suppose Ava is a knight. Then Bob is a knave. Works.

    Suppose instead that Ava is a knave. Then Bob must
        be a knight. His statement would be a lie, so
        this doesn't work.




What does "neither" mean?
    When is Bob's statement true? both knights
    When is Bob's statement false? either Bob or Ava is a knave
    Is there another way to write Bob's statement?




////////////////////////////////////////////////////////

You see two different inhabitants, Eve and Fred.

Eve says, "I am a knave or Fred is a knight."



What are Eve and Fred? Eve: knight, Fred: knight

Suppose Eve is a knight. Then Fred must be a knight.

Suppose instead that Eve is a knave. Then her statement
    is true because she is a knave, so this isn't possible.

(what does the "or" mean?) inclusive



///////////////////////////////////////////////////////

Next time:
- More with logic puzzles
- Begin logic gates and truth tables

///////////////////////////////////////////////////////

Homework 0: due Thursday, August 22
    - get Sireum/IntelliJ + GitHub ready (do this now!)
    - post something in Ed Discussion
    - come to office hours or post in Ed Discussion if
        you need software setup help!

Homework 1: due Tuesday, August 27
    - first page of homework is logical reasoning
        (what we did today)
    - second page is logic puzzles

Next: finish logic puzzles, start truth tables